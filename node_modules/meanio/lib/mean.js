'use strict';

var Container = require('lazy-dependable').Container,
        Q = require('q'),
        inherits = require('util').inherits;

function Meanio() {
    Container.call(this);
    if (this.active)
        return;
    Meanio.Singleton = this;
    this.version = require('../package').version;
    this.instanceWaitersQ = [];
    var defer;
    while (Meanio.instanceWaiters.length) {
        defer = Q.defer();
        Meanio.instanceWaiters.shift()(this, defer);
        this.instanceWaitersQ.push(defer.promise);
    }
}

inherits(Meanio, Container);

Meanio.prototype.status = function () {
    return {
        active: this.active,
        name: this.name
    };
};

Meanio.prototype.loadConfig = function (specified) {
    var specified = specified || 'clean';
    
    return this.config[specified];
};
Meanio.prototype.loadConfigNew = function (showDefaults,removeDefaults) {
    var showDefaults = showDefaults || false;
    var removeDefaults = removeDefaults || true;
    var data = this.config.flat.diff;
    if (!showDefaults) {
        var resultholder = {};
        for (var key in data) {
            if (data[key] != null && removeDefaults == false) {
                if (typeof data[key].value != "undefined") {
                    data[key] = data[key].value;
                }
            }
            var keyName = key.toString();
            var splits = [];
            if (keyName.indexOf('.') > -1) {
                splits = keyName.split('.');
                if (!resultholder[splits[0]]) {
                    resultholder[splits[0]] = {};
                }
                if (!resultholder[splits[0]][splits[1]]) {
                    resultholder[splits[0]][splits[1]] = {};
                }
                if (!resultholder[splits[0]][splits[1]][splits[2]]) {
                    resultholder[splits[0]][splits[1]][splits[2]] = {};
                }
                if (!resultholder[splits[0]][splits[1]][splits[2]][splits[3]]) {
                    resultholder[splits[0]][splits[1]][splits[2]][splits[3]] = {};
                }
                if (splits.length == 2) {
                    resultholder[splits[0]][splits[1]] = data[key];
                }
                if (splits.length == 3) {
                    resultholder[splits[0]][splits[1]][splits[2]] = data[key];
                }
                if (splits.length == 4) {
                    resultholder[splits[0]][splits[1]][splits[2]][splits[3]] = data[key];
                }
                //resultholder = getsplits(resultholder, splits, key);
            } else {
                resultholder[keyName] = data[key];
            }
        }
        return resultholder;
    }
    return data;
};

Meanio.instanceWaiters = [];
Meanio.onInstance = function (func) {
    Meanio.instanceWaiters.push(func);
};

(require('./core_modules/config'))(Meanio);
(require('./menu'))(Meanio);
(require('./core_modules/module'))(Meanio);
(require('./core_modules/db'))(Meanio);
(require('./core_modules/server'))(Meanio);

/*global exports:true*/
module.exports = exports = new Meanio();
/*global exports:false*/
